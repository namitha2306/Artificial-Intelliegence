# -*- coding: utf-8 -*-
"""Searches.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O228X3yZt0etpsr-Xcn5yLka7Uf_5nQY
"""

WHITE = 0
GRAY = 1
BLACK = 2

class Graph:
    
    def __init__(self,M):
        self.Mat = M
        self.N = M.shape[0]
        self.parent = [None for _ in range(self.N)]
        self.color = [None for _ in range(self.N)]
        
          
    def getParent(self,index):
        return self.parent[index]
        
    def getColor(self,index):
        return self.color[index]
    
    def setParent(self,index,P):
        self.parent[index] = P
        
    def setColor(self,index,color):
        self.color[index] = color
        
    def getAdj(self, index):
        adj=[]
        for i,v in enumerate(self.Mat[index,:]):
            if v!=0:
                adj.append(i)
        return adj

class BFS:
    
    def __init__(self,G,S):
        
        self.G = G
        self.S = S
        self.Q = []
        self.result = []
        
    def traverse(self):
    
        for i in range(self.G.N):
            self.G.setColor(i,WHITE)
            self.G.setParent(i,None)
            
        self.G.setColor(self.S,GRAY)
        self.Q.append(self.S)
        while self.Q :
            u = self.Q.pop(0)
            for v in self.G.getAdj(u):
                if self.G.getColor(v) == WHITE:
                    self.G.setColor(v,GRAY)
                    self.G.setParent(v,u)
                    self.Q.append(v)
            self.G.setColor(u,BLACK)
            self.result.append(u)
            
    def printResult(self):
        for u in self.result:
            print(u,end=' ')
        print('')
            
    def printLevel(self,curr,depth):
        if curr == None:
            return;
        for i in range(1,depth):
            print("â”‚   ",end='')
        if depth > 0:
            print("|___",end='')
        print(curr);

        for child in [i for i,x in enumerate(self.G.parent) if x== curr]:
            self.printLevel(child, depth + 1);

import numpy as np

M = np.array([[0,1,0,1,1],
              [0,0,0,1,0],
              [0,0,0,0,1],
              [0,0,0,0,0],
              [0,1,0,0,0]])

G = Graph(M)
bfs = BFS(G,1)
bfs.traverse()
bfs.printResult()
bfs.printLevel(1,0)

class DFS:

  def __init__(self,G,source):

    self.G = G
    self.source = source
    self.Q = []
    self.result = []


  def traverse(self):
    for i in range(self.G.N):
      self.G.setColor(i,WHITE)
      self.G.setParent(i,None)
    
    
    self.Q.append(self.source)
    
    while self.Q :
      u = self.Q.pop(0)
      if self.G.getColor(u) == WHITE:
        self.G.setColor(u,GRAY)
        self.visit(self.G,u)
        

  def visit(self,G,u):
    for v in self.G.getAdj(u):
      if self.G.getColor(v) == WHITE: 
        self.G.setColor(v,GRAY)
        self.G.setParent(v,u)
        self.visit(G,v)
    self.G.setColor(u,BLACK) 
    self.result.append(u)

  def printResult(self):
    for u in self.result:
      print(u,end=' ')
    print('')
     

import numpy as np

M = np.array([[0,1,0,1,1],
              [0,0,0,1,0],
              [0,0,0,0,1],
              [0,0,0,0,0],
              [0,1,0,0,0]])

G = Graph(M)
dfs = DFS(G,1)
dfs.traverse()
dfs.printResult()

WHITE=1
GREY=0
BLACK=-1

class Graph2:

  def __init__(self,M):
    self.Matrix=M
    self.N=M.shape[0]
    self.parent= [None for i in range(self.N)]
    self.color= [WHITE for i in range(self.N)]

  def getParent(self,index):
        return self.parent[index]

  def getColor(self,index):
      return self.color[index]
  
  def setParent(self,index,P):
      self.parent[index] = P
      
  def setColor(self,index,color):
      self.color[index] = color
      
  def getAdjacent(self,index):
      A=[]
      for i,v in enumerate(self.Matrix[index,:]):
          if v!=0:
              A.append(i)
      return A

class DLS:

  def __init__(self,Graph2,MaxD,goal):
    self.G=Graph2
    self.Path=[]
    self.D=MaxD
    self.level=1
    self.Goal=goal
  
  def Traversal(self,S):
    self.Path.append(S)
    self.G.setColor(S,BLACK)
    if S==self.Goal:
      return self.Path
    elif len(self.Path)==self.D:
      return False
    else:
      self.level=self.level+1
    for v in self.G.getAdjacent(S):
      if self.G.getColor(v) == WHITE:
        temp=self.Traversal(v)
        if temp==True:
          return self.Path
        elif temp==self.Path:
            return self.Path 
        else:
          self.Path.remove(v)
    return False  
          
    

import numpy as np
M = np.array([[0,1,1,1,0,0,0,0],
              [1,0,0,0,1,1,0,0],
              [1,0,0,0,0,0,1,1],
              [1,0,0,0,0,0,0,1],
              [0,1,0,0,0,1,0,0],
              [0,1,0,0,1,0,1,0],
              [0,0,1,0,0,1,0,0],
              [0,0,1,1,0,0,0,0]])


G = Graph2(M)
search = DLS(G,4,5)
print(search.Traversal(3))